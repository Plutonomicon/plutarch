letSomeFields.lam (program
   1.0.0
   ((\i0 ->
       (\i0 ->
          (\i0 i0 ->
             (\i0 ->
                (\i0 ->
                   addInteger
                     (addInteger (unIData (i4 i2)) (unIData (i4 i1)))
                     (unIData (i4 (i5 (i6 i1)))))
                  (i5 i1))
               (i4 (i3 i1)))
            (force headList))
         (\i0 -> i2 (i2 i1)))
      (force tailList)))
letSomeFields.order (program
   1.0.0
   ((\i0 ->
       (\i0 ->
          (\i0 i0 ->
             (\i0 ->
                (\i0 ->
                   addInteger
                     (addInteger (unIData (i4 i2)) (unIData (i4 i1)))
                     (unIData (i4 (i5 (i6 i1)))))
                  (i5 i1))
               (i4 (i3 i1)))
            (force headList))
         (\i0 -> i2 (i2 i1)))
      (force tailList)))
letSomeFields.app (program
   1.0.0
   ((\i0 ->
       (\i0 ->
          (\i0 ->
             (\i0 ->
                (\i0 ->
                   (\i0 ->
                      addInteger
                        (addInteger (unIData (i4 i2)) (unIData (i4 i1)))
                        (unIData (i4 (i5 (i6 i1)))))
                     (i5 i1))
                  (i4 (i3 i1)))
               [I 0, I 1, I 2, I 3, I 4, I 5, I 6, I 7, I 8, I 9])
            (force headList))
         (\i0 -> i2 (i2 i1)))
      (force tailList)))
nFields.lam (program
   1.0.0
   ((\i0 i0 -> addInteger (unIData (i2 i1)) (unIData (i2 (force tailList i1))))
      (force headList)))
nFields.app (program
   1.0.0
   ((\i0 ->
       (\i0 -> addInteger (unIData (i2 i1)) (unIData (i2 (force tailList i1))))
         [I 0, I 1, I 2, I 3, I 4, I 5, I 6, I 7, I 8, I 9])
      (force headList)))