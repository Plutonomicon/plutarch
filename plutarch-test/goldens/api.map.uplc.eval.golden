lookup.itself (program
   1.0.0
   (\i0 ->
      (\i0 i0 i0 ->
         (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))
           (\i0 i0 ->
              force
                (force (force chooseList)
                   i1
                   (delay (\i0 i0 -> force i1))
                   (delay
                      (force
                         (force ifThenElse
                            (equalsData
                               (force (force fstPair) (force headList i1))
                               i4)
                            (delay (i5 (force headList i1)))
                            (delay (i2 (force tailList i1))))))))
           i1)
        (\i0 -> (\i0 i0 i0 -> i2 i3) (unIData (force (force sndPair) i1)))
        (bData i1)))
lookup.hit (program 1.0.0 (\i0 i0 -> i2 42))
lookup.miss (program 1.0.0 (\i0 i0 -> force i1))
lookupData.hit (program 1.0.0 (\i0 i0 -> i2 (I 42)))
lookupData.miss (program 1.0.0 (\i0 i0 -> force i1))
findWithDefault.itself (program
   1.0.0
   (\i0 i0 ->
      (\i0 i0 i0 i0 ->
         (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))
           (\i0 i0 ->
              force
                (force (force chooseList)
                   i1
                   (delay i5)
                   (delay
                      (force
                         (force ifThenElse
                            (equalsData
                               (force (force fstPair) (force headList i1))
                               i6)
                            (delay
                               (i4 (force (force sndPair) (force headList i1))))
                            (delay (i2 (force tailList i1))))))))
           i1)
        (bData i1)
        i2
        unIData))
findWithDefault.hit (program 1.0.0 42)
findWithDefault.hit2 (program 1.0.0 6)
findWithDefault.miss (program 1.0.0 12)
singleton (program 1.0.0 [(B #6b6579, I 42)])
singletonData (program 1.0.0 [(B #6b6579, I 42)])
insert.empty (program 1.0.0 [(B #6b6579, I 42)])
insert.replace (program 1.0.0 [(B #6b6579, I 84)])
delete.empty (program 1.0.0 [])
delete.only (program 1.0.0 [])
delete.miss (program 1.0.0 [(B #6b6579, I 42)])
delete.new (program 1.0.0 [(B #6b6579, I 42)])
delete.old (program 1.0.0 [(B #6e65776b6579, I 6)])
difference.emptyLeft (program 1.0.0 [])
difference.emptyRight (program 1.0.0 [(B #6b6579, I 42)])
difference.emptyResult (program 1.0.0 [])
difference.partialOverlap (program 1.0.0 [(B #61, I 42)])
zipMapsWith.(-) (program 1.0.0 [(B #61, I 42), (B #62, I 13), (B #63, I -7)])
leftBiasedUnion.const (program 1.0.0 [(B #61, I 42), (B #62, I 6), (B #63, I 23)])
unionResolvingCollisionsWith.const (program 1.0.0 [(B #61, I 42), (B #62, I 6), (B #63, I 23)])
unionResolvingCollisionsWith.flip const (program 1.0.0 [(B #61, I 42), (B #62, I 7), (B #63, I 23)])
unionResolvingCollisionsWith.double (program 1.0.0 [(B #6b6579, I 84)])
unionResolvingCollisionsWith.(+) (program 1.0.0 [(B #6b6579, I 65)])
unionResolvingCollisionsWith.preservesCombineCommutativity (program 1.0.0 [(B #6b6579, I 65)])
unionResolvingCollisionsWithData.const (program 1.0.0 [(B #6b6579, I 42)])
unionResolvingCollisionsWithData.emptyLeft (program 1.0.0 [(B #6b6579, I 42)])
unionResolvingCollisionsWithData.emptyRight (program 1.0.0 [(B #6b6579, I 42)])
unionResolvingCollisionsWithData.distinctKeys (program 1.0.0 [(B #6b6579, I 42), (B #6e65776b6579, I 6)])
intersectionWith.const (program 1.0.0 [(B #62, I 6)])
intersectionWith.flip const (program 1.0.0 [(B #62, I 7)])
intersectionWith.double (program 1.0.0 [(B #6b6579, I 84)])
intersectionWith.(+) (program 1.0.0 [(B #6b6579, I 65)])
intersectionWith.preservesCombineCommutativity (program 1.0.0 [(B #6b6579, I 65)])
intersectionWith.partialKeyMismatch (program 1.0.0 [(B #6b6579, I 65)])
intersectionWithData.const (program 1.0.0 [(B #6b6579, I 42)])
intersectionWithData.emptyLeft (program 1.0.0 [])
intersectionWithData.emptyRight (program 1.0.0 [])
intersectionWithData.keyMismatch (program 1.0.0 [])