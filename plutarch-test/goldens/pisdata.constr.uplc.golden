sop.4wheeler.normal (program
   1.0.0
   ((\i0 -> constrData 0 (i1 (I 2) (i1 (I 5) (i1 (I 42) (i1 (I 0) [])))))
      (force mkCons)))
sop.4wheeler.pdatasum (program
   1.0.0
   ((\i0 -> constrData 0 (i1 (I 2) (i1 (I 5) (i1 (I 42) (i1 (I 0) [])))))
      (force mkCons)))
sop.2wheeler.normal (program 1.0.0 ((\i0 -> constrData 1 (i1 (I 5) (i1 (I 0) []))) (force mkCons)))
sop.2wheeler.pdatasum (program 1.0.0 ((\i0 -> constrData 1 (i1 (I 5) (i1 (I 0) []))) (force mkCons)))
sop.immovable.normal (program 1.0.0 (constrData 2 []))
sop.immovable.pdatasum (program 1.0.0 (constrData 2 []))
prod.1.normal (program
   1.0.0
   ((\i0 -> constrData 0 (i1 (B #ab) (i1 (B #41) (i1 (B #0e) []))))
      (force mkCons)))
prod.1.pdatasum (program
   1.0.0
   ((\i0 -> constrData 0 (i1 (B #ab) (i1 (B #41) (i1 (B #0e) []))))
      (force mkCons)))
prod.2.normal (program
   1.0.0
   ((\i0 ->
       constrData
         0
         (i1
            (Constr 0 [B #])
            (i1
               (Constr 1 [Constr 0 [Constr 0 [B #ab], I 0]])
               (i1 (Constr 2 [Constr 0 [Constr 0 [B #da]]]) []))))
      (force mkCons)))
prod.2.datasum (program
   1.0.0
   ((\i0 ->
       constrData
         0
         (i1
            (Constr 0 [B #])
            (i1
               (Constr 1 [Constr 0 [Constr 0 [B #ab], I 0]])
               (i1 (Constr 2 [Constr 0 [Constr 0 [B #da]]]) []))))
      (force mkCons)))
enum.PA (program 1.0.0 (constrData 0 []))
enum.PB (program 1.0.0 (constrData 1 []))
pconstant-pcon-rel (program 1.0.0 (Constr 0 [Constr 1 [B #01], Constr 1 []]))