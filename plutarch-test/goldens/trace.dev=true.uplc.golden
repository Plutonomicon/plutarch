ptrace.one (program 1.0.0 (force (force trace "foo" (delay ()))))
ptrace.two (program 1.0.0 ((\i0 -> force (i1 "foo" (delay (force (i1 "bar" (delay ())))))) (force trace)))
ptraceShowId.right-42 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (force trace ((\i0 -> i1 (\i0 -> appendString "PLeft" (appendString i3 "()")) (\i0 -> appendString "PRight" (appendString i3 ((\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> appendString (force (i17 (lessThanInteger i1 0) (delay "-") (delay ""))) ((\i0 -> (\i0 -> force (i19 (equalsInteger i2 0) (delay (i8 i1)) (delay ((\i0 -> appendString i1 (i9 i2)) (i4 i2))))) (remainderInteger (force (i18 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2))) 10)) (quotientInteger (force (i17 (lessThanEqualsInteger i1 (subtractInteger 0 1)) (delay (subtractInteger 0 i1)) (delay i1))) 10))) i1)))) (\i0 -> \i0 -> i1 42)) (delay (\i0 -> \i0 -> i1 42)))) " ") (\i0 -> force (i12 (equalsInteger i1 0) (delay i2) (delay (force (i12 (equalsInteger i1 1) (delay i3) (delay (force (i12 (equalsInteger i1 2) (delay i4) (delay (force (i12 (equalsInteger i1 3) (delay i5) (delay (force (i12 (equalsInteger i1 4) (delay i6) (delay (force (i12 (equalsInteger i1 5) (delay i7) (delay (force (i12 (equalsInteger i1 6) (delay i8) (delay (force (i12 (equalsInteger i1 7) (delay i9) (delay (force (i12 (equalsInteger i1 8) (delay i10) (delay (force (i12 (equalsInteger i1 9) (delay i11) (delay error))))))))))))))))))))))))))))))) "0") "1") "2") "3") "4") "5") "6") "7") "8") "9") (force ifThenElse)))
ptraceIfTrue.true (program 1.0.0 ((\i0 -> force (force ifThenElse i1 (delay (force trace "foo" i1)) (delay i1))) True))
ptraceIfTrue.false (program 1.0.0 ((\i0 -> force (force ifThenElse i1 (delay (force trace "foo" i1)) (delay i1))) False))
ptraceIfFalse.true (program 1.0.0 ((\i0 -> force (force ifThenElse i1 (delay i1) (delay (force trace "foo" i1)))) True))
ptraceIfFalse.false (program 1.0.0 ((\i0 -> force (force ifThenElse i1 (delay i1) (delay (force trace "foo" i1)))) False))
chained.false.true.false (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> force (i2 i1 (delay i1) (delay (i3 "foo" i1)))) ((\i0 -> force (i2 i1 (delay (i3 "bar" i1)) (delay i1))) False)) (force ifThenElse)) (force trace)))
chained.ptrace.true.false (program 1.0.0 ((\i0 -> force (i1 "foo" (delay ((\i0 -> force (force ifThenElse i1 (delay (i2 "bar" i1)) (delay i1))) False)))) (force trace)))
chained.ptrace.true.true (program 1.0.0 ((\i0 -> force (i1 "foo" (delay ((\i0 -> force (force ifThenElse i1 (delay (i2 "bar" i1)) (delay i1))) True)))) (force trace)))