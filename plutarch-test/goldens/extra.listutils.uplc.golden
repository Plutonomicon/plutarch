reverse.reverse_[1..5] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 (i6 i4 i2) i1) (delay i2))) (\i0 -> \i0 -> i3 i1 i2) (\i0 -> \i0 -> force i1) (i1 1 (i1 2 (i1 3 (i1 4 (i1 5 (\i0 -> \i0 -> force i1))))))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
isSorted.[1..10] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> force ((\i0 -> \i0 -> force ifThenElse i2 i1 (delay False)) (lessThanEqualsInteger i4 i2) (delay (i6 i3)))) (delay True)) (delay True)) (i1 1 (i1 2 (i1 3 (i1 4 (i1 5 (i1 6 (i1 7 (i1 8 (i1 9 (i1 10 (\i0 -> \i0 -> force i1)))))))))))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
isSorted.reverse_[1..10] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i2 i1 False True) ((\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> force ((\i0 -> \i0 -> i9 i2 i1 (delay False)) (lessThanEqualsInteger i4 i2) (delay (i6 i3)))) (delay True)) (delay True)) (i2 10 (i2 9 (i2 8 (i2 7 (i2 6 (i2 5 (i2 4 (i2 3 (i2 2 (i2 1 (\i0 -> \i0 -> force i1))))))))))))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
isSorted.reverse_[] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 (i6 i4 i2) i1) (delay i2))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i3 i4) (\i0 -> \i0 -> force i1) (\i0 -> \i0 -> force i1)))
pmapMaybe.mapMaybe_[1..5] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 i2 (\i0 -> i7 i1 (i5 i2)) (delay (i4 i1))) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> \i0 -> \i0 -> i2 i3) (i1 1 (i1 2 (i1 3 (i1 4 (i1 5 (\i0 -> \i0 -> force i1))))))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
pmapMaybe.mapMaybe_[] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 i2 (\i0 -> (\i0 -> \i0 -> \i0 -> i2 i4 i3) (i5 i2)) (delay (i4 i1))) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> \i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> force i1)))
pmapMaybe.mapMaybe_[1..5]_Nothing (program 1.0.0 ((\i0 -> (\i0 -> equalsInteger 0 (i1 (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 (addInteger i4 1) i1) (delay i2)) 0 ((\i0 -> i2 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 i2 (\i0 -> i8 i1 (i5 i2)) (delay (i4 i1))) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> \i0 -> \i0 -> force i1) (i2 1 (i2 2 (i2 3 (i2 4 (i2 5 (\i0 -> \i0 -> force i1))))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
preplicate.preplicate_5_0 (program 1.0.0 ((\i0 -> equalsInteger 5 (i1 (\i0 -> \i0 -> \i0 -> force (force (force chooseList) i1 (delay i2) (delay (i3 (addInteger i2 1) (force tailList i1))))) 0 (i1 (\i0 -> \i0 -> \i0 -> force (force ifThenElse (lessThanEqualsInteger i2 0) (delay []) (delay (force mkCons i1 (i3 (subtractInteger i2 1) i1))))) 5 0))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))))
preplicate.preplicate_0_0 (program 1.0.0 ((\i0 -> equalsInteger 0 (i1 (\i0 -> \i0 -> \i0 -> force (force (force chooseList) i1 (delay i2) (delay (i3 (addInteger i2 1) (force tailList i1))))) 0 (i1 (\i0 -> \i0 -> \i0 -> force (force ifThenElse (lessThanEqualsInteger i2 0) (delay []) (delay (force mkCons i1 (i3 (subtractInteger i2 1) i1))))) 0 0))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))))
pfindJust.pfindJust_2_[1..10] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> \i0 -> i2 (\i0 -> i2 (\i0 -> equalsInteger i2 i1) (delay False)) (delay (i1 (\i0 -> False) (delay True)))) (i1 4) ((\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 i2 (\i0 -> \i0 -> \i0 -> i2 i3) (delay (i4 i1))) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> force (force ifThenElse (equalsInteger i1 2) (delay (i2 (addInteger i1 2))) (delay (\i0 -> \i0 -> force i1)))) (i2 1 (i2 2 (i2 3 (i2 4 (i2 5 (i2 6 (i2 7 (i2 8 (i2 9 (i2 10 (\i0 -> \i0 -> force i1))))))))))))) (\i0 -> \i0 -> \i0 -> i2 i3)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
pfindJust.pfindJust_20_[1..10] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 (\i0 -> equalsInteger i2 i1) (delay False)) (delay (i1 (\i0 -> False) (delay True)))) ((\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 i2 (\i0 -> \i0 -> \i0 -> i2 i3) (delay (i4 i1))) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> force (force ifThenElse (equalsInteger i1 20) (delay (\i0 -> \i0 -> i2 i3)) (delay i2))) (i2 1 (i2 2 (i2 3 (i2 4 (i2 5 (i2 6 (i2 7 (i2 8 (i2 9 (i2 10 (\i0 -> \i0 -> force i1))))))))))))) (\i0 -> \i0 -> force i1)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
pfindJust.pfindJust_[] (program 1.0.0 ((\i0 -> \i0 -> i2 (\i0 -> i2 (\i0 -> equalsInteger i2 i1) (delay False)) (delay (i1 (\i0 -> False) (delay True)))) (\i0 -> \i0 -> force i1) ((\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> \i0 -> force i1)) (delay (i3 (force headList i1) (\i0 -> \i0 -> \i0 -> i2 i3) (delay (i2 (force tailList i1)))))))) (\i0 -> \i0 -> \i0 -> i2 i3) [])))
plookupAssoc.plookupAssoc_3_[(1..10, 1..10)] (program 1.0.0 ((\i0 -> (\i0 -> \i0 -> i2 (\i0 -> i2 (\i0 -> equalsInteger i2 i1) (delay False)) (delay (i1 (\i0 -> False) (delay True)))) ((\i0 -> \i0 -> \i0 -> i2 i3) 8) ((\i0 -> \i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 i2 (\i0 -> \i0 -> \i0 -> i2 i3) (delay (i4 i1))) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> force (force ifThenElse (equalsInteger i3 (i5 i1)) (delay (\i0 -> \i0 -> i2 i3)) (delay (\i0 -> \i0 -> force i1)))) i1 (\i0 -> (\i0 -> \i0 -> \i0 -> i2 i3) (i4 i1)) (delay (\i0 -> \i0 -> force i1))) (\i0 -> i1 (\i0 -> \i0 -> i2)) (\i0 -> i1 (\i0 -> \i0 -> i1)) 3 (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 10) 1) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 9) 2) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 8) 3) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 7) 4) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 6) 5) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 5) 6) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 4) 7) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 3) 8) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 2) 9) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 10) (\i0 -> \i0 -> force i1))))))))))))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
plookupAssoc.plookupAssoc_20_[(1..10, 1..10)] (program 1.0.0 ((\i0 -> (\i0 -> \i0 -> i2 (\i0 -> i2 (\i0 -> equalsInteger i2 i1) (delay False)) (delay (i1 (\i0 -> False) (delay True)))) (\i0 -> \i0 -> force i1) ((\i0 -> \i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 i2 (\i0 -> \i0 -> \i0 -> i2 i3) (delay (i4 i1))) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> force (force ifThenElse (equalsInteger i3 (i5 i1)) (delay (\i0 -> \i0 -> i2 i3)) (delay (\i0 -> \i0 -> force i1)))) i1 (\i0 -> (\i0 -> \i0 -> \i0 -> i2 i3) (i4 i1)) (delay (\i0 -> \i0 -> force i1))) (\i0 -> i1 (\i0 -> \i0 -> i2)) (\i0 -> i1 (\i0 -> \i0 -> i1)) 20 (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 10) 1) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 9) 2) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 8) 3) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 7) 4) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 6) 5) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 5) 6) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 4) 7) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 3) 8) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 2) 9) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 10) (\i0 -> \i0 -> force i1))))))))))))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
plookupAssoc.plookupAssoc_[] (program 1.0.0 ((\i0 -> \i0 -> i2 (\i0 -> i2 (\i0 -> equalsInteger i2 i1) (delay False)) (delay (i1 (\i0 -> False) (delay True)))) (\i0 -> \i0 -> force i1) ((\i0 -> \i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 i2 (\i0 -> \i0 -> \i0 -> i2 i3) (delay (i4 i1))) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> force (force ifThenElse (equalsInteger i3 (i5 i1)) (delay (\i0 -> \i0 -> i2 i3)) (delay (\i0 -> \i0 -> force i1)))) i1 (\i0 -> (\i0 -> \i0 -> \i0 -> i2 i3) (i4 i1)) (delay (\i0 -> \i0 -> force i1))) (\i0 -> i1 (\i0 -> \i0 -> i2)) (\i0 -> i1 (\i0 -> \i0 -> i1)) 20 (\i0 -> \i0 -> force i1))))