-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package plutarch-api
@version 2.1.0


-- | Useful tools that aren't part of the Plutarch API per se, but get used
--   in multiple places.
module Plutarch.Api.Utils

-- | <a>Term</a>, but with its type arguments flipped. This is a useful
--   helper for defining <a>PTryFrom</a> instances.
--   
--   For example, consider the <a>PTryFrom</a> instance for
--   <tt>PTokenName</tt>:
--   
--   <pre>
--   instance PTryFrom PData (PAsData PTokenName) where
--      type PTryFromExcess PData (PAsData PTokenName) = Mret PTokenName
--   </pre>
--   
--   We need to do this because <tt>PTryFromExcess</tt> expects something
--   of kind <tt>S -&gt; Type</tt>, but <a>Term</a> has kind <tt>S -&gt; (S
--   -&gt; Type) -&gt; Type</tt>, which doesn't quite fit. By using
--   <a>Mret</a>, we end up with something of kind <tt>(S -&gt; Type) -&gt;
--   S -&gt; Type</tt>, which fits.
--   
--   The name is just <a>Term</a> written backwards.
newtype Mret (a :: S -> Type) (s :: S)
Mret :: Term s a -> Mret (a :: S -> Type) (s :: S)
instance GHC.Generics.Generic (Plutarch.Api.Utils.Mret a s)


-- | This module is designed to be imported qualified, as many of its
--   identifiers clash with the Plutarch prelude.
module Plutarch.Api.AssocMap

newtype PMap (keysort :: KeyGuarantees) (k :: PType) (v :: PType) (s :: S)
PMap :: Term s (PBuiltinList (PBuiltinPair (PAsData k) (PAsData v))) -> PMap (keysort :: KeyGuarantees) (k :: PType) (v :: PType) (s :: S)

data KeyGuarantees
Sorted :: KeyGuarantees
Unsorted :: KeyGuarantees

data Commutativity
Commutative :: Commutativity
NonCommutative :: Commutativity

-- | Construct an empty <a>PMap</a>.
pempty :: Term s (PMap 'Sorted k v)

-- | Given a <a>PMap</a> of uncertain order, yield a <a>PMap</a> that is
--   known to be sorted.
passertSorted :: forall (k :: S -> Type) (v :: S -> Type) (any :: KeyGuarantees) (s :: S). (POrd k, PIsData k, PIsData v) => Term s (PMap any k v :--> PMap 'Sorted k v)

-- | Applies a function to every value in the map, much like <a>map</a>.
pmap :: forall (g :: KeyGuarantees) (k :: S -> Type) (a :: S -> Type) (b :: S -> Type) (s :: S). (PIsData a, PIsData b) => Term s ((a :--> b) :--> (PMap g k a :--> PMap g k b))

-- | As <a>pmap</a>, but over Data representations.
pmapData :: forall (g :: KeyGuarantees) (k :: S -> Type) (a :: S -> Type) (b :: S -> Type) (s :: S). Term s ((PAsData a :--> PAsData b) :--> (PMap g k a :--> PMap g k b))

-- | Maps and filters the map, much like <a>mapMaybe</a>.
pmapMaybe :: forall (g :: KeyGuarantees) (k :: S -> Type) (a :: S -> Type) (b :: S -> Type) (s :: S). (PIsData a, PIsData b) => Term s ((a :--> PMaybe b) :--> (PMap g k a :--> PMap g k b))

-- | As <a>pmapMaybe</a>, but over Data representation.
pmapMaybeData :: forall (g :: KeyGuarantees) (k :: S -> Type) (a :: S -> Type) (b :: S -> Type) (s :: S). Term s ((PAsData a :--> PMaybe (PAsData b)) :--> (PMap g k a :--> PMap g k b))

-- | Given a comparison function and a "zero" value, check whether a binary
--   relation holds over 2 sorted <a>PMap</a>s.
--   
--   <h1>Important note</h1>
--   
--   This is primarily intended to be used with <tt>PValue</tt>. We assume
--   that the comparison behaves like a comparison would (thus, being at
--   least a partial order, or possibly a total order or equivalence), and
--   that the starting value does not break it. Use with extreme care.
pcheckBinRel :: forall (k :: S -> Type) (v :: S -> Type) (s :: S). (POrd k, PIsData k, PIsData v) => Term s ((v :--> (v :--> PBool)) :--> (v :--> (PMap 'Sorted k v :--> (PMap 'Sorted k v :--> PBool))))

-- | Verifies all values in the map satisfy the given predicate.
pall :: forall (any :: KeyGuarantees) (k :: S -> Type) (v :: S -> Type) (s :: S). PIsData v => Term s ((v :--> PBool) :--> (PMap any k v :--> PBool))

-- | Build the union of two <a>PMap</a>s, merging values that share the
--   same key using the given function.
punionResolvingCollisionsWith :: forall (k :: S -> Type) (v :: S -> Type) (s :: S). (POrd k, PIsData k, PIsData v) => Commutativity -> Term s ((v :--> (v :--> v)) :--> (PMap 'Sorted k v :--> (PMap 'Sorted k v :--> PMap 'Sorted k v)))

-- | Tests whether the map is empty.
pnull :: forall (any :: KeyGuarantees) (k :: S -> Type) (v :: S -> Type) (s :: S). Term s (PMap any k v :--> PBool)
instance (Plutarch.Builtin.PIsData k, Plutarch.Builtin.PIsData v, Plutarch.Show.PShow k, Plutarch.Show.PShow v) => Plutarch.Show.PShow (Plutarch.Api.AssocMap.PMap keysort k v)
instance Plutarch.Internal.PlutusType.PlutusType (Plutarch.Api.AssocMap.PMap keysort k v)
instance GHC.Generics.Generic (Plutarch.Api.AssocMap.PMap keysort k v s)
instance GHC.Show.Show Plutarch.Api.AssocMap.Commutativity
instance GHC.Classes.Ord Plutarch.Api.AssocMap.Commutativity
instance GHC.Classes.Eq Plutarch.Api.AssocMap.Commutativity
instance (forall a b. GHC.Show.Show (f a b)) => GHC.Show.Show (Plutarch.Api.AssocMap.SomeMergeHandler_ f k v)
instance (forall a b. GHC.Show.Show (f a b)) => GHC.Show.Show (Plutarch.Api.AssocMap.MergeHandler_ f k v)
instance (forall a b. GHC.Show.Show (f a b)) => GHC.Show.Show (Plutarch.Api.AssocMap.MergeHandlerCommutative_ f k v)
instance (forall a b. GHC.Show.Show (f a b)) => GHC.Show.Show (Plutarch.Api.AssocMap.BothPresentHandler_ f k v)
instance (forall a b. GHC.Show.Show (f a b)) => GHC.Show.Show (Plutarch.Api.AssocMap.BothPresentHandlerCommutative_ f k v)
instance (forall a b. GHC.Show.Show (f a b)) => GHC.Show.Show (Plutarch.Api.AssocMap.OnePresentHandler_ f k v)
instance Plutarch.Internal.PlutusType.DerivePlutusType (Plutarch.Api.AssocMap.PMap keysort k v)
instance Plutarch.Builtin.PIsData (Plutarch.Api.AssocMap.PMap keysort k v)
instance Plutarch.Bool.PEq (Plutarch.Api.AssocMap.PMap 'Plutarch.Api.AssocMap.Sorted k v)
instance (Plutarch.DataRepr.Internal.PLiftData k, Plutarch.DataRepr.Internal.PLiftData v, GHC.Classes.Ord (Plutarch.Lift.PLifted k)) => Plutarch.Lift.PUnsafeLiftDecl (Plutarch.Api.AssocMap.PMap 'Plutarch.Api.AssocMap.Unsorted k v)
instance (Plutarch.DataRepr.Internal.PConstantData k, Plutarch.DataRepr.Internal.PConstantData v, GHC.Classes.Ord k) => Plutarch.Lift.PConstantDecl (PlutusTx.AssocMap.Map k v)
instance (Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData (Plutarch.Builtin.PAsData k), Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData (Plutarch.Builtin.PAsData v)) => Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData (Plutarch.Builtin.PAsData (Plutarch.Api.AssocMap.PMap 'Plutarch.Api.AssocMap.Unsorted k v))
instance (Plutarch.Bool.POrd k, Plutarch.Builtin.PIsData k, Plutarch.Builtin.PIsData v, Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData (Plutarch.Builtin.PAsData k), Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData (Plutarch.Builtin.PAsData v)) => Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData (Plutarch.Builtin.PAsData (Plutarch.Api.AssocMap.PMap 'Plutarch.Api.AssocMap.Sorted k v))


-- | Value-related functionality. In order to keep the interface efficient
--   and safe at the same time, there is a type-level distinction between
--   <a>PValue</a>s that are guaranteed to be properly normalized and those
--   that provide no such guarantee.
--   
--   Also for efficiency reasons, the Ada-specific functions assume that
--   there can be only one token name for the Ada currency symbol, and they
--   don't check whether it matches <a>adaToken</a>.
module Plutarch.Api.Value

newtype PValue (keys :: KeyGuarantees) (amounts :: AmountGuarantees) (s :: S)
PValue :: Term s (PMap keys PCurrencySymbol (PMap keys PTokenName PInteger)) -> PValue (keys :: KeyGuarantees) (amounts :: AmountGuarantees) (s :: S)

newtype PCurrencySymbol (s :: S)
PCurrencySymbol :: Term s PByteString -> PCurrencySymbol (s :: S)

newtype PTokenName (s :: S)
PTokenName :: Term s PByteString -> PTokenName (s :: S)

data AmountGuarantees
NoGuarantees :: AmountGuarantees
NonZero :: AmountGuarantees
Positive :: AmountGuarantees

-- | Given a <a>PValue</a>, either construct another <a>PValue</a> with the
--   same contents and a proof that all amounts in it are positive, or
--   error.
passertPositive :: forall (kg :: KeyGuarantees) (ag :: AmountGuarantees) (s :: S). Term s (PValue kg ag :--> PValue kg 'Positive)

-- | 'Forget' that a <tt>Value</tt> has an only-positive guarantee.
pforgetPositive :: forall (a :: AmountGuarantees) (k :: KeyGuarantees) (s :: S). Term s (PValue k 'Positive) -> Term s (PValue k a)

-- | Normalize the argument to contain no zero quantity nor empty token
--   map.
pnormalize :: forall (any :: AmountGuarantees) (s :: S). Term s (PValue 'Sorted any :--> PValue 'Sorted 'NonZero)

-- | Given a description of a relation on amounts, check whether that
--   relation holds over sorted <a>PValue</a>s.
--   
--   <h1>Important note</h1>
--   
--   This is intended for use with boolean comparison functions, which must
--   define at least a partial order (total orders and equivalences are
--   acceptable as well). Use of this with anything else is not guaranteed
--   to give anything resembling a sensible answer. Use with extreme care.
pcheckBinRel :: forall (any0 :: AmountGuarantees) (any1 :: AmountGuarantees) (s :: S). Term s ((PInteger :--> (PInteger :--> PBool)) :--> (PValue 'Sorted any0 :--> (PValue 'Sorted any1 :--> PBool)))

-- | Combine two <a>PValue</a>s applying the given function to any pair of
--   quantities with the same asset class. Note that the result is _not_
--   <tt>normalize</tt>d and may contain zero quantities.
punionResolvingCollisionsWith :: forall (any0 :: AmountGuarantees) (any1 :: AmountGuarantees) (s :: S). Commutativity -> Term s ((PInteger :--> (PInteger :--> PInteger)) :--> (PValue 'Sorted any0 :--> (PValue 'Sorted any1 :--> PValue 'Sorted 'NoGuarantees)))
instance Plutarch.Show.PShow Plutarch.Api.Value.PTokenName
instance Plutarch.Bool.POrd Plutarch.Api.Value.PTokenName
instance Plutarch.Bool.PPartialOrd Plutarch.Api.Value.PTokenName
instance Plutarch.Bool.PEq Plutarch.Api.Value.PTokenName
instance Plutarch.Builtin.PIsData Plutarch.Api.Value.PTokenName
instance Plutarch.Internal.PlutusType.PlutusType Plutarch.Api.Value.PTokenName
instance GHC.Generics.Generic (Plutarch.Api.Value.PTokenName s)
instance Plutarch.Show.PShow Plutarch.Api.Value.PCurrencySymbol
instance Plutarch.Bool.POrd Plutarch.Api.Value.PCurrencySymbol
instance Plutarch.Bool.PPartialOrd Plutarch.Api.Value.PCurrencySymbol
instance Plutarch.Bool.PEq Plutarch.Api.Value.PCurrencySymbol
instance Plutarch.Builtin.PIsData Plutarch.Api.Value.PCurrencySymbol
instance Plutarch.Internal.PlutusType.PlutusType Plutarch.Api.Value.PCurrencySymbol
instance GHC.Generics.Generic (Plutarch.Api.Value.PCurrencySymbol s)
instance Plutarch.Show.PShow (Plutarch.Api.Value.PValue keys amounts)
instance Plutarch.Builtin.PIsData (Plutarch.Api.Value.PValue keys amounts)
instance Plutarch.Internal.PlutusType.PlutusType (Plutarch.Api.Value.PValue keys amounts)
instance GHC.Generics.Generic (Plutarch.Api.Value.PValue keys amounts s)
instance Plutarch.Lift.PConstantDecl PlutusLedgerApi.V1.Value.TokenName
instance Plutarch.Lift.PConstantDecl PlutusLedgerApi.V1.Value.CurrencySymbol
instance Plutarch.Lift.PConstantDecl PlutusLedgerApi.V1.Value.Value
instance Plutarch.Internal.PlutusType.DerivePlutusType (Plutarch.Api.Value.PValue keys amounts)
instance Plutarch.Lift.PUnsafeLiftDecl (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Unsorted 'Plutarch.Api.Value.NonZero)
instance Plutarch.Bool.PEq (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Sorted 'Plutarch.Api.Value.Positive)
instance Plutarch.Bool.PEq (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Sorted 'Plutarch.Api.Value.NonZero)
instance Plutarch.Bool.PPartialOrd (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Sorted 'Plutarch.Api.Value.Positive)
instance Plutarch.Bool.PPartialOrd (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Sorted 'Plutarch.Api.Value.NonZero)
instance Plutarch.Bool.PEq (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Sorted 'Plutarch.Api.Value.NoGuarantees)
instance GHC.Base.Semigroup (Plutarch.Internal.Term s (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Sorted 'Plutarch.Api.Value.Positive))
instance PlutusTx.Semigroup.Semigroup (Plutarch.Internal.Term s (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Sorted 'Plutarch.Api.Value.Positive))
instance GHC.Base.Semigroup (Plutarch.Internal.Term s (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Sorted 'Plutarch.Api.Value.NonZero))
instance PlutusTx.Semigroup.Semigroup (Plutarch.Internal.Term s (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Sorted 'Plutarch.Api.Value.NonZero))
instance GHC.Base.Semigroup (Plutarch.Internal.Term s (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Sorted 'Plutarch.Api.Value.NoGuarantees))
instance PlutusTx.Semigroup.Semigroup (Plutarch.Internal.Term s (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Sorted 'Plutarch.Api.Value.NoGuarantees))
instance GHC.Base.Semigroup (Plutarch.Internal.Term s (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Sorted normalization)) => GHC.Base.Monoid (Plutarch.Internal.Term s (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Sorted normalization))
instance PlutusTx.Semigroup.Semigroup (Plutarch.Internal.Term s (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Sorted normalization)) => PlutusTx.Monoid.Monoid (Plutarch.Internal.Term s (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Sorted normalization))
instance PlutusTx.Semigroup.Semigroup (Plutarch.Internal.Term s (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Sorted 'Plutarch.Api.Value.NoGuarantees)) => PlutusTx.Monoid.Group (Plutarch.Internal.Term s (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Sorted 'Plutarch.Api.Value.NoGuarantees))
instance PlutusTx.Semigroup.Semigroup (Plutarch.Internal.Term s (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Sorted 'Plutarch.Api.Value.NonZero)) => PlutusTx.Monoid.Group (Plutarch.Internal.Term s (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Sorted 'Plutarch.Api.Value.NonZero))
instance Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData (Plutarch.Builtin.PAsData (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Unsorted 'Plutarch.Api.Value.NoGuarantees))
instance Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData (Plutarch.Builtin.PAsData (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Sorted 'Plutarch.Api.Value.NoGuarantees))
instance Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData (Plutarch.Builtin.PAsData (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Sorted 'Plutarch.Api.Value.Positive))
instance Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData (Plutarch.Builtin.PAsData (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Unsorted 'Plutarch.Api.Value.Positive))
instance Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData (Plutarch.Builtin.PAsData (Plutarch.Api.Value.PValue 'Plutarch.Api.AssocMap.Sorted 'Plutarch.Api.Value.NonZero))
instance Plutarch.Internal.PlutusType.DerivePlutusType Plutarch.Api.Value.PCurrencySymbol
instance Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData (Plutarch.Builtin.PAsData Plutarch.Api.Value.PCurrencySymbol)
instance Plutarch.Lift.PUnsafeLiftDecl Plutarch.Api.Value.PCurrencySymbol
instance Plutarch.Internal.PlutusType.DerivePlutusType Plutarch.Api.Value.PTokenName
instance Plutarch.Lift.PUnsafeLiftDecl Plutarch.Api.Value.PTokenName
instance Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData (Plutarch.Builtin.PAsData Plutarch.Api.Value.PTokenName)


-- | <h1>Note</h1>
--   
--   The <a>PValue</a> and <a>PMap</a>-related functionality can be found
--   in other modules, as these clash with the Plutarch prelude. These
--   should be imported qualified.
module Plutarch.Api

newtype PScriptContext (s :: S)
PScriptContext :: Term s (PDataRecord '["txInfo" ':= PTxInfo, "purpose" ':= PScriptPurpose]) -> PScriptContext (s :: S)
newtype PTxInfo (s :: S)
PTxInfo :: Term s (PDataRecord '["inputs" ':= PBuiltinList PTxInInfo, "referenceInputs" ':= PBuiltinList PTxInInfo, "outputs" ':= PBuiltinList PTxOut, "fee" ':= PValue 'Sorted 'Positive, "mint" ':= PValue 'Sorted 'NoGuarantees, "dcert" ':= PBuiltinList PDCert, "wdrl" ':= PMap 'Unsorted PStakingCredential PInteger, "validRange" ':= PInterval PPosixTime, "signatories" ':= PBuiltinList (PAsData PPubKeyHash), "redeemers" ':= PMap 'Unsorted PScriptPurpose PRedeemer, "datums" ':= PMap 'Unsorted PDatumHash PDatum, "id" ':= PTxId]) -> PTxInfo (s :: S)

data PScriptPurpose (s :: S)
PMinting :: Term s (PDataRecord '["_0" ':= PCurrencySymbol]) -> PScriptPurpose (s :: S)
PSpending :: Term s (PDataRecord '["_0" ':= PTxOutRef]) -> PScriptPurpose (s :: S)
PRewarding :: Term s (PDataRecord '["_0" ':= PStakingCredential]) -> PScriptPurpose (s :: S)
PCertifying :: Term s (PDataRecord '["_0" ':= PDCert]) -> PScriptPurpose (s :: S)

-- | Reference to a transaction output, with an index referencing which
--   exact output we mean.
newtype PTxOutRef (s :: S)
PTxOutRef :: Term s (PDataRecord '["id" ':= PTxId, "idx" ':= PInteger]) -> PTxOutRef (s :: S)

newtype PTxOut (s :: S)
PTxOut :: Term s (PDataRecord '["address" ':= PAddress, "value" ':= PValue 'Sorted 'Positive, "datum" ':= POutputDatum, "referenceScript" ':= PMaybeData PScriptHash]) -> PTxOut (s :: S)

newtype PTxId (s :: S)
PTxId :: Term s (PDataRecord '["_0" ':= PByteString]) -> PTxId (s :: S)

-- | An input of the pending transaction.
newtype PTxInInfo (s :: S)
PTxInInfo :: Term s (PDataRecord '["outRef" ':= PTxOutRef, "resolved" ':= PTxOut]) -> PTxInInfo (s :: S)

data POutputDatum (s :: S)
PNoOutputDatum :: Term s (PDataRecord '[]) -> POutputDatum (s :: S)
POutputDatumHash :: Term s (PDataRecord '["datumHash" ':= PDatumHash]) -> POutputDatum (s :: S)

-- | Inline datum as per <a>CIP-0032</a>
POutputDatum :: Term s (PDataRecord '["outputDatum" ':= PDatum]) -> POutputDatum (s :: S)

-- | Find the output txns corresponding to the input being validated.
--   
--   Takes as arguments the inputs, outputs and the spending transaction
--   referenced from <a>PScriptPurpose</a>.
--   
--   <b>Example:</b>
--   
--   <pre>
--   ctx &lt;- tcont $ pletFields <tt>["txInfo", "purpose"] sc
--   pmatchC (getField </tt>"purpose" ctx) &gt;&gt;= case
--     PSpending outRef' -&gt; do
--       let outRef = pfield <tt>"_0" # outRef'
--           inputs = pfield </tt>"inputs" # (getField <tt>"txInfo" ctx)
--           outputs = pfield </tt>"outputs" # (getField @"txInfo" ctx)
--       pure $ pgetContinuingOutputs # inputs # outputs # outRef
--     _ -&gt;
--       pure $ ptraceError "not a spending tx"
--   
--   </pre>
pgetContinuingOutputs :: forall (s :: S). Term s (PBuiltinList PTxInInfo :--> (PBuiltinList PTxOut :--> (PTxOutRef :--> PBuiltinList PTxOut)))

-- | Find the input being spent in the current transaction.
--   
--   Takes as arguments the inputs, as well as the spending transaction
--   referenced from <a>PScriptPurpose</a>.
--   
--   <b>Example:</b>
--   
--   <pre>
--   ctx &lt;- tcont $ pletFields <tt>["txInfo", "purpose"] sc
--   pmatchC (getField </tt>"purpose" ctx) &gt;&gt;= case
--     PSpending outRef' -&gt; do
--       let outRef = pfield <tt>"_0" # outRef'
--           inputs = pfield </tt>"inputs" # (getField @"txInfo" ctx)
--       pure $ pfindOwnInput # inputs # outRef
--     _ -&gt;
--       pure $ ptraceError "not a spending tx"
--   
--   </pre>
pfindOwnInput :: forall (s :: S). Term s (PBuiltinList PTxInInfo :--> (PTxOutRef :--> PMaybe PTxInInfo))

newtype PDatum (s :: S)
PDatum :: Term s PData -> PDatum (s :: S)

newtype PDatumHash (s :: S)
PDatumHash :: Term s PByteString -> PDatumHash (s :: S)

newtype PRedeemer (s :: S)
PRedeemer :: Term s PData -> PRedeemer (s :: S)

newtype PRedeemerHash (s :: S)
PRedeemerHash :: Term s PByteString -> PRedeemerHash (s :: S)

newtype PScriptHash (s :: S)
PScriptHash :: Term s PByteString -> PScriptHash (s :: S)

-- | Hash a script, appending the Plutus V2 prefix.
scriptHash :: Script -> ScriptHash

datumHash :: Datum -> DatumHash

redeemerHash :: Redeemer -> RedeemerHash

dataHash :: forall (a :: Type). ToData a => a -> BuiltinByteString

-- | Lookup up the datum given the datum hash.
--   
--   Takes as argument the datum assoc list from a <a>PTxInfo</a>.
--   Validates the datum using <a>PTryFrom</a>.
--   
--   <b>Example:</b>
--   
--   <pre>
--   pparseDatum <tt>MyType # datumHash #$ pfield </tt>"datums" # txinfo
--   
--   </pre>
pparseDatum :: forall (a :: S -> Type) (s :: S). PTryFrom PData (PAsData a) => Term s (PDatumHash :--> (PBuiltinList (PAsData (PBuiltinPair (PAsData PDatumHash) (PAsData PDatum))) :--> PMaybe (PAsData a)))

newtype PValue (keys :: KeyGuarantees) (amounts :: AmountGuarantees) (s :: S)
PValue :: Term s (PMap keys PCurrencySymbol (PMap keys PTokenName PInteger)) -> PValue (keys :: KeyGuarantees) (amounts :: AmountGuarantees) (s :: S)

data AmountGuarantees
NoGuarantees :: AmountGuarantees
NonZero :: AmountGuarantees
Positive :: AmountGuarantees

newtype PCurrencySymbol (s :: S)
PCurrencySymbol :: Term s PByteString -> PCurrencySymbol (s :: S)

newtype PTokenName (s :: S)
PTokenName :: Term s PByteString -> PTokenName (s :: S)

data PDCert (s :: S)
PDCertDelegRegKey :: Term s (PDataRecord '["_0" ':= PStakingCredential]) -> PDCert (s :: S)
PDCertDelegDeRegKey :: Term s (PDataRecord '["_0" ':= PStakingCredential]) -> PDCert (s :: S)
PDCertDelegDelegate :: Term s (PDataRecord '["_0" ':= PStakingCredential, "_1" ':= PPubKeyHash]) -> PDCert (s :: S)
PDCertPoolRegister :: Term s (PDataRecord '["_0" ':= PPubKeyHash, "_1" ':= PPubKeyHash]) -> PDCert (s :: S)
PDCertPoolRetire :: Term s (PDataRecord '["_0" ':= PPubKeyHash, "_1" ':= PInteger]) -> PDCert (s :: S)
PDCertGenesis :: Term s (PDataRecord '[]) -> PDCert (s :: S)
PDCertMir :: Term s (PDataRecord '[]) -> PDCert (s :: S)

newtype PMap (keysort :: KeyGuarantees) (k :: PType) (v :: PType) (s :: S)
PMap :: Term s (PBuiltinList (PBuiltinPair (PAsData k) (PAsData v))) -> PMap (keysort :: KeyGuarantees) (k :: PType) (v :: PType) (s :: S)

data KeyGuarantees
Sorted :: KeyGuarantees
Unsorted :: KeyGuarantees

data Commutativity
Commutative :: Commutativity
NonCommutative :: Commutativity

data PCredential (s :: S)
PPubKeyCredential :: Term s (PDataRecord '["_0" ':= PPubKeyHash]) -> PCredential (s :: S)
PScriptCredential :: Term s (PDataRecord '["_0" ':= PScriptHash]) -> PCredential (s :: S)

data PStakingCredential (s :: S)
PStakingHash :: Term s (PDataRecord '["_0" ':= PCredential]) -> PStakingCredential (s :: S)
PStakingPtr :: Term s (PDataRecord '["_0" ':= PInteger, "_1" ':= PInteger, "_2" ':= PInteger]) -> PStakingCredential (s :: S)

newtype PAddress (s :: S)
PAddress :: Term s (PDataRecord '["credential" ':= PCredential, "stakingCredential" ':= PMaybeData PStakingCredential]) -> PAddress (s :: S)

newtype PPosixTime (s :: S)
PPosixTime :: Term s PInteger -> PPosixTime (s :: S)

newtype PInterval (a :: S -> Type) (s :: S)
PInterval :: Term s (PDataRecord '["from" ':= PLowerBound a, "to" ':= PUpperBound a]) -> PInterval (a :: S -> Type) (s :: S)

newtype PLowerBound (a :: S -> Type) (s :: S)
PLowerBound :: Term s (PDataRecord '["_0" ':= PExtended a, "_1" ':= PBool]) -> PLowerBound (a :: S -> Type) (s :: S)

newtype PUpperBound (a :: S -> Type) (s :: S)
PUpperBound :: Term s (PDataRecord '["_0" ':= PExtended a, "_1" ':= PBool]) -> PUpperBound (a :: S -> Type) (s :: S)

data PExtended (a :: S -> Type) (s :: S)
PNegInf :: Term s (PDataRecord '[]) -> PExtended (a :: S -> Type) (s :: S)
PFinite :: Term s (PDataRecord '["_0" ':= a]) -> PExtended (a :: S -> Type) (s :: S)
PPosInf :: Term s (PDataRecord '[]) -> PExtended (a :: S -> Type) (s :: S)

newtype PubKey
PubKey :: LedgerBytes -> PubKey

[$sel:getPubKey:PubKey] :: PubKey -> LedgerBytes

newtype PPubKeyHash (s :: S)
PPubKeyHash :: Term s PByteString -> PPubKeyHash (s :: S)

pubKeyHash :: PubKey -> PubKeyHash

data PMaybeData (a :: S -> Type) (s :: S)
PDJust :: Term s (PDataRecord '["_0" ':= a]) -> PMaybeData (a :: S -> Type) (s :: S)
PDNothing :: Term s (PDataRecord '[]) -> PMaybeData (a :: S -> Type) (s :: S)
instance Plutarch.Show.PShow Plutarch.Api.PDatum
instance Plutarch.Bool.PEq Plutarch.Api.PDatum
instance Plutarch.Builtin.PIsData Plutarch.Api.PDatum
instance Plutarch.Internal.PlutusType.PlutusType Plutarch.Api.PDatum
instance GHC.Generics.Generic (Plutarch.Api.PDatum s)
instance Plutarch.Show.PShow Plutarch.Api.PRedeemer
instance Plutarch.Bool.PEq Plutarch.Api.PRedeemer
instance Plutarch.Builtin.PIsData Plutarch.Api.PRedeemer
instance Plutarch.Internal.PlutusType.PlutusType Plutarch.Api.PRedeemer
instance GHC.Generics.Generic (Plutarch.Api.PRedeemer s)
instance Plutarch.Show.PShow Plutarch.Api.PDatumHash
instance Plutarch.Bool.POrd Plutarch.Api.PDatumHash
instance Plutarch.Bool.PPartialOrd Plutarch.Api.PDatumHash
instance Plutarch.Bool.PEq Plutarch.Api.PDatumHash
instance Plutarch.Builtin.PIsData Plutarch.Api.PDatumHash
instance Plutarch.Internal.PlutusType.PlutusType Plutarch.Api.PDatumHash
instance GHC.Generics.Generic (Plutarch.Api.PDatumHash s)
instance Plutarch.Show.PShow Plutarch.Api.POutputDatum
instance Plutarch.Bool.PEq Plutarch.Api.POutputDatum
instance Plutarch.Builtin.PIsData Plutarch.Api.POutputDatum
instance Plutarch.Internal.PlutusType.PlutusType Plutarch.Api.POutputDatum
instance GHC.Generics.Generic (Plutarch.Api.POutputDatum s)
instance Plutarch.Show.PShow Plutarch.Api.PPosixTime
instance Plutarch.Num.PNum Plutarch.Api.PPosixTime
instance Plutarch.Integer.PIntegral Plutarch.Api.PPosixTime
instance Plutarch.Bool.POrd Plutarch.Api.PPosixTime
instance Plutarch.Bool.PPartialOrd Plutarch.Api.PPosixTime
instance Plutarch.Bool.PEq Plutarch.Api.PPosixTime
instance Plutarch.Builtin.PIsData Plutarch.Api.PPosixTime
instance Plutarch.Internal.PlutusType.PlutusType Plutarch.Api.PPosixTime
instance GHC.Generics.Generic (Plutarch.Api.PPosixTime s)
instance Plutarch.Show.PShow Plutarch.Api.PPubKeyHash
instance Plutarch.Bool.POrd Plutarch.Api.PPubKeyHash
instance Plutarch.Bool.PPartialOrd Plutarch.Api.PPubKeyHash
instance Plutarch.Bool.PEq Plutarch.Api.PPubKeyHash
instance Plutarch.Builtin.PIsData Plutarch.Api.PPubKeyHash
instance Plutarch.Internal.PlutusType.PlutusType Plutarch.Api.PPubKeyHash
instance GHC.Generics.Generic (Plutarch.Api.PPubKeyHash s)
instance GHC.Show.Show Plutarch.Api.PubKey
instance GHC.Classes.Ord Plutarch.Api.PubKey
instance GHC.Classes.Eq Plutarch.Api.PubKey
instance Plutarch.Show.PShow Plutarch.Api.PTxId
instance Plutarch.Bool.POrd Plutarch.Api.PTxId
instance Plutarch.Bool.PPartialOrd Plutarch.Api.PTxId
instance Plutarch.Bool.PEq Plutarch.Api.PTxId
instance Plutarch.DataRepr.Internal.Field.PDataFields Plutarch.Api.PTxId
instance Plutarch.Builtin.PIsData Plutarch.Api.PTxId
instance Plutarch.Internal.PlutusType.PlutusType Plutarch.Api.PTxId
instance GHC.Generics.Generic (Plutarch.Api.PTxId s)
instance Plutarch.Show.PShow Plutarch.Api.PTxOutRef
instance Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData Plutarch.Api.PTxOutRef
instance Plutarch.Bool.POrd Plutarch.Api.PTxOutRef
instance Plutarch.Bool.PPartialOrd Plutarch.Api.PTxOutRef
instance Plutarch.Bool.PEq Plutarch.Api.PTxOutRef
instance Plutarch.DataRepr.Internal.Field.PDataFields Plutarch.Api.PTxOutRef
instance Plutarch.Builtin.PIsData Plutarch.Api.PTxOutRef
instance Plutarch.Internal.PlutusType.PlutusType Plutarch.Api.PTxOutRef
instance GHC.Generics.Generic (Plutarch.Api.PTxOutRef s)
instance (Plutarch.Builtin.PIsData a, Plutarch.Show.PShow a) => Plutarch.Show.PShow (Plutarch.Api.PMaybeData a)
instance Plutarch.Bool.PEq (Plutarch.Api.PMaybeData a)
instance Plutarch.Builtin.PIsData (Plutarch.Api.PMaybeData a)
instance Plutarch.Internal.PlutusType.PlutusType (Plutarch.Api.PMaybeData a)
instance GHC.Generics.Generic (Plutarch.Api.PMaybeData a s)
instance Plutarch.Show.PShow Plutarch.Api.PScriptHash
instance Plutarch.Bool.POrd Plutarch.Api.PScriptHash
instance Plutarch.Bool.PPartialOrd Plutarch.Api.PScriptHash
instance Plutarch.Bool.PEq Plutarch.Api.PScriptHash
instance Plutarch.Builtin.PIsData Plutarch.Api.PScriptHash
instance Plutarch.Internal.PlutusType.PlutusType Plutarch.Api.PScriptHash
instance GHC.Generics.Generic (Plutarch.Api.PScriptHash s)
instance Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData Plutarch.Api.PCredential
instance Plutarch.Show.PShow Plutarch.Api.PCredential
instance Plutarch.Bool.POrd Plutarch.Api.PCredential
instance Plutarch.Bool.PPartialOrd Plutarch.Api.PCredential
instance Plutarch.Bool.PEq Plutarch.Api.PCredential
instance Plutarch.Builtin.PIsData Plutarch.Api.PCredential
instance Plutarch.Internal.PlutusType.PlutusType Plutarch.Api.PCredential
instance GHC.Generics.Generic (Plutarch.Api.PCredential s)
instance Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData Plutarch.Api.PStakingCredential
instance Plutarch.Show.PShow Plutarch.Api.PStakingCredential
instance Plutarch.Bool.POrd Plutarch.Api.PStakingCredential
instance Plutarch.Bool.PPartialOrd Plutarch.Api.PStakingCredential
instance Plutarch.Bool.PEq Plutarch.Api.PStakingCredential
instance Plutarch.Builtin.PIsData Plutarch.Api.PStakingCredential
instance Plutarch.Internal.PlutusType.PlutusType Plutarch.Api.PStakingCredential
instance GHC.Generics.Generic (Plutarch.Api.PStakingCredential s)
instance Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData Plutarch.Api.PAddress
instance Plutarch.Show.PShow Plutarch.Api.PAddress
instance Plutarch.Bool.POrd Plutarch.Api.PAddress
instance Plutarch.Bool.PPartialOrd Plutarch.Api.PAddress
instance Plutarch.Bool.PEq Plutarch.Api.PAddress
instance Plutarch.DataRepr.Internal.Field.PDataFields Plutarch.Api.PAddress
instance Plutarch.Builtin.PIsData Plutarch.Api.PAddress
instance Plutarch.Internal.PlutusType.PlutusType Plutarch.Api.PAddress
instance GHC.Generics.Generic (Plutarch.Api.PAddress s)
instance Plutarch.Show.PShow Plutarch.Api.PDCert
instance Plutarch.Bool.POrd Plutarch.Api.PDCert
instance Plutarch.Bool.PPartialOrd Plutarch.Api.PDCert
instance Plutarch.Bool.PEq Plutarch.Api.PDCert
instance Plutarch.Builtin.PIsData Plutarch.Api.PDCert
instance Plutarch.Internal.PlutusType.PlutusType Plutarch.Api.PDCert
instance GHC.Generics.Generic (Plutarch.Api.PDCert s)
instance Plutarch.Show.PShow Plutarch.Api.PScriptPurpose
instance Plutarch.Bool.PEq Plutarch.Api.PScriptPurpose
instance Plutarch.Builtin.PIsData Plutarch.Api.PScriptPurpose
instance Plutarch.Internal.PlutusType.PlutusType Plutarch.Api.PScriptPurpose
instance GHC.Generics.Generic (Plutarch.Api.PScriptPurpose s)
instance Plutarch.Show.PShow Plutarch.Api.PTxOut
instance Plutarch.Bool.PEq Plutarch.Api.PTxOut
instance Plutarch.DataRepr.Internal.Field.PDataFields Plutarch.Api.PTxOut
instance Plutarch.Builtin.PIsData Plutarch.Api.PTxOut
instance Plutarch.Internal.PlutusType.PlutusType Plutarch.Api.PTxOut
instance GHC.Generics.Generic (Plutarch.Api.PTxOut s)
instance Plutarch.Show.PShow Plutarch.Api.PTxInInfo
instance Plutarch.Bool.PEq Plutarch.Api.PTxInInfo
instance Plutarch.DataRepr.Internal.Field.PDataFields Plutarch.Api.PTxInInfo
instance Plutarch.Builtin.PIsData Plutarch.Api.PTxInInfo
instance Plutarch.Internal.PlutusType.PlutusType Plutarch.Api.PTxInInfo
instance GHC.Generics.Generic (Plutarch.Api.PTxInInfo s)
instance (Plutarch.Builtin.PIsData a, Plutarch.Show.PShow a) => Plutarch.Show.PShow (Plutarch.Api.PExtended a)
instance (Plutarch.Bool.POrd a, Plutarch.Builtin.PIsData a) => Plutarch.Bool.POrd (Plutarch.Api.PExtended a)
instance (Plutarch.Bool.POrd a, Plutarch.Builtin.PIsData a) => Plutarch.Bool.PPartialOrd (Plutarch.Api.PExtended a)
instance Plutarch.Bool.PEq (Plutarch.Api.PExtended a)
instance Plutarch.Builtin.PIsData (Plutarch.Api.PExtended a)
instance Plutarch.Internal.PlutusType.PlutusType (Plutarch.Api.PExtended a)
instance GHC.Generics.Generic (Plutarch.Api.PExtended a s)
instance (Plutarch.Builtin.PIsData a, Plutarch.Show.PShow a) => Plutarch.Show.PShow (Plutarch.Api.PUpperBound a)
instance (Plutarch.Bool.POrd a, Plutarch.Builtin.PIsData a) => Plutarch.Bool.POrd (Plutarch.Api.PUpperBound a)
instance (Plutarch.Bool.POrd a, Plutarch.Builtin.PIsData a) => Plutarch.Bool.PPartialOrd (Plutarch.Api.PUpperBound a)
instance Plutarch.Bool.PEq (Plutarch.Api.PUpperBound a)
instance Plutarch.DataRepr.Internal.Field.PDataFields (Plutarch.Api.PUpperBound a)
instance Plutarch.Builtin.PIsData (Plutarch.Api.PUpperBound a)
instance Plutarch.Internal.PlutusType.PlutusType (Plutarch.Api.PUpperBound a)
instance GHC.Generics.Generic (Plutarch.Api.PUpperBound a s)
instance (Plutarch.Builtin.PIsData a, Plutarch.Show.PShow a) => Plutarch.Show.PShow (Plutarch.Api.PLowerBound a)
instance (Plutarch.Bool.POrd a, Plutarch.Builtin.PIsData a) => Plutarch.Bool.POrd (Plutarch.Api.PLowerBound a)
instance (Plutarch.Bool.POrd a, Plutarch.Builtin.PIsData a) => Plutarch.Bool.PPartialOrd (Plutarch.Api.PLowerBound a)
instance Plutarch.Bool.PEq (Plutarch.Api.PLowerBound a)
instance Plutarch.DataRepr.Internal.Field.PDataFields (Plutarch.Api.PLowerBound a)
instance Plutarch.Builtin.PIsData (Plutarch.Api.PLowerBound a)
instance Plutarch.Internal.PlutusType.PlutusType (Plutarch.Api.PLowerBound a)
instance GHC.Generics.Generic (Plutarch.Api.PLowerBound a s)
instance (Plutarch.Builtin.PIsData a, Plutarch.Show.PShow a) => Plutarch.Show.PShow (Plutarch.Api.PInterval a)
instance (Plutarch.Bool.POrd a, Plutarch.Builtin.PIsData a) => Plutarch.Bool.POrd (Plutarch.Api.PInterval a)
instance (Plutarch.Bool.POrd a, Plutarch.Builtin.PIsData a) => Plutarch.Bool.PPartialOrd (Plutarch.Api.PInterval a)
instance Plutarch.Bool.PEq (Plutarch.Api.PInterval a)
instance Plutarch.DataRepr.Internal.Field.PDataFields (Plutarch.Api.PInterval a)
instance Plutarch.Builtin.PIsData (Plutarch.Api.PInterval a)
instance Plutarch.Internal.PlutusType.PlutusType (Plutarch.Api.PInterval a)
instance GHC.Generics.Generic (Plutarch.Api.PInterval a s)
instance Plutarch.Show.PShow Plutarch.Api.PTxInfo
instance Plutarch.Bool.PEq Plutarch.Api.PTxInfo
instance Plutarch.DataRepr.Internal.Field.PDataFields Plutarch.Api.PTxInfo
instance Plutarch.Builtin.PIsData Plutarch.Api.PTxInfo
instance Plutarch.Internal.PlutusType.PlutusType Plutarch.Api.PTxInfo
instance GHC.Generics.Generic (Plutarch.Api.PTxInfo s)
instance Plutarch.Show.PShow Plutarch.Api.PScriptContext
instance Plutarch.Bool.PEq Plutarch.Api.PScriptContext
instance Plutarch.DataRepr.Internal.Field.PDataFields Plutarch.Api.PScriptContext
instance Plutarch.Builtin.PIsData Plutarch.Api.PScriptContext
instance Plutarch.Internal.PlutusType.PlutusType Plutarch.Api.PScriptContext
instance GHC.Generics.Generic (Plutarch.Api.PScriptContext s)
instance Plutarch.Lift.PConstantDecl PlutusLedgerApi.V2.Contexts.ScriptContext
instance Plutarch.Lift.PConstantDecl PlutusLedgerApi.V2.Contexts.TxInfo
instance Plutarch.Lift.PConstantDecl PlutusLedgerApi.V1.Contexts.ScriptPurpose
instance Plutarch.Lift.PConstantDecl PlutusLedgerApi.V2.Tx.TxOut
instance Plutarch.Lift.PConstantDecl PlutusLedgerApi.V2.Contexts.TxInInfo
instance Plutarch.Lift.PConstantDecl PlutusLedgerApi.V2.Tx.OutputDatum
instance Plutarch.Lift.PConstantDecl PlutusLedgerApi.V1.Scripts.Datum
instance Plutarch.Lift.PConstantDecl PlutusLedgerApi.V1.Scripts.Redeemer
instance Plutarch.Lift.PConstantDecl PlutusLedgerApi.V1.Scripts.DatumHash
instance Plutarch.Lift.PConstantDecl PlutusLedgerApi.V1.DCert.DCert
instance Plutarch.Lift.PConstantDecl PlutusLedgerApi.V1.Credential.Credential
instance Plutarch.Lift.PConstantDecl PlutusLedgerApi.V1.Credential.StakingCredential
instance Plutarch.Lift.PConstantDecl PlutusLedgerApi.V1.Time.POSIXTime
instance Plutarch.DataRepr.Internal.PConstantData a => Plutarch.Lift.PConstantDecl (PlutusLedgerApi.V1.Interval.Interval a)
instance Plutarch.Lift.PConstantDecl PlutusLedgerApi.V1.Crypto.PubKeyHash
instance Plutarch.Lift.PConstantDecl PlutusLedgerApi.V1.Tx.TxId
instance Plutarch.Lift.PConstantDecl PlutusLedgerApi.V1.Tx.TxOutRef
instance Plutarch.Lift.PConstantDecl PlutusLedgerApi.V1.Address.Address
instance Plutarch.DataRepr.Internal.PConstantData a => Plutarch.Lift.PConstantDecl (GHC.Maybe.Maybe a)
instance Plutarch.Lift.PConstantDecl PlutusLedgerApi.V1.Scripts.ScriptHash
instance Plutarch.DataRepr.Internal.PConstantData a => Plutarch.Lift.PConstantDecl (PlutusLedgerApi.V1.Interval.UpperBound a)
instance Plutarch.DataRepr.Internal.PConstantData a => Plutarch.Lift.PConstantDecl (PlutusLedgerApi.V1.Interval.LowerBound a)
instance Plutarch.Internal.PlutusType.DerivePlutusType Plutarch.Api.PScriptContext
instance Plutarch.Lift.PUnsafeLiftDecl Plutarch.Api.PScriptContext
instance Plutarch.Internal.PlutusType.DerivePlutusType Plutarch.Api.PTxInfo
instance Plutarch.Lift.PUnsafeLiftDecl Plutarch.Api.PTxInfo
instance Plutarch.Internal.PlutusType.DerivePlutusType (Plutarch.Api.PInterval a)
instance Plutarch.DataRepr.Internal.PLiftData a => Plutarch.Lift.PUnsafeLiftDecl (Plutarch.Api.PInterval a)
instance Plutarch.Internal.PlutusType.DerivePlutusType (Plutarch.Api.PLowerBound a)
instance Plutarch.DataRepr.Internal.PLiftData a => Plutarch.Lift.PUnsafeLiftDecl (Plutarch.Api.PLowerBound a)
instance Plutarch.Internal.PlutusType.DerivePlutusType (Plutarch.Api.PUpperBound a)
instance Plutarch.DataRepr.Internal.PLiftData a => Plutarch.Lift.PUnsafeLiftDecl (Plutarch.Api.PUpperBound a)
instance Plutarch.Internal.PlutusType.DerivePlutusType (Plutarch.Api.PExtended a)
instance Plutarch.Internal.PlutusType.DerivePlutusType Plutarch.Api.PTxInInfo
instance Plutarch.Lift.PUnsafeLiftDecl Plutarch.Api.PTxInInfo
instance Plutarch.Internal.PlutusType.DerivePlutusType Plutarch.Api.PTxOut
instance Plutarch.Lift.PUnsafeLiftDecl Plutarch.Api.PTxOut
instance Plutarch.Internal.PlutusType.DerivePlutusType Plutarch.Api.PScriptPurpose
instance Plutarch.Lift.PUnsafeLiftDecl Plutarch.Api.PScriptPurpose
instance Plutarch.Internal.PlutusType.DerivePlutusType Plutarch.Api.PDCert
instance Plutarch.Lift.PUnsafeLiftDecl Plutarch.Api.PDCert
instance Plutarch.Internal.PlutusType.DerivePlutusType Plutarch.Api.PAddress
instance Plutarch.Lift.PUnsafeLiftDecl Plutarch.Api.PAddress
instance Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData (Plutarch.Builtin.PAsData Plutarch.Api.PAddress)
instance Plutarch.Internal.PlutusType.DerivePlutusType Plutarch.Api.PStakingCredential
instance Plutarch.Lift.PUnsafeLiftDecl Plutarch.Api.PStakingCredential
instance Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData (Plutarch.Builtin.PAsData Plutarch.Api.PStakingCredential)
instance Plutarch.Internal.PlutusType.DerivePlutusType Plutarch.Api.PCredential
instance Plutarch.Lift.PUnsafeLiftDecl Plutarch.Api.PCredential
instance Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData (Plutarch.Builtin.PAsData Plutarch.Api.PCredential)
instance Plutarch.Internal.PlutusType.DerivePlutusType Plutarch.Api.PScriptHash
instance Plutarch.Lift.PUnsafeLiftDecl Plutarch.Api.PScriptHash
instance Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData (Plutarch.Builtin.PAsData Plutarch.Api.PScriptHash)
instance Plutarch.Internal.PlutusType.DerivePlutusType (Plutarch.Api.PMaybeData a)
instance Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData a => Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData (Plutarch.Api.PMaybeData a)
instance Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData a => Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData (Plutarch.Builtin.PAsData (Plutarch.Api.PMaybeData a))
instance Plutarch.DataRepr.Internal.PLiftData a => Plutarch.Lift.PUnsafeLiftDecl (Plutarch.Api.PMaybeData a)
instance (Plutarch.Builtin.PIsData a, Plutarch.Bool.POrd a) => Plutarch.Bool.PPartialOrd (Plutarch.Api.PMaybeData a)
instance (Plutarch.Builtin.PIsData a, Plutarch.Bool.POrd a) => Plutarch.Bool.POrd (Plutarch.Api.PMaybeData a)
instance Plutarch.Internal.PlutusType.DerivePlutusType Plutarch.Api.PTxOutRef
instance Plutarch.Lift.PUnsafeLiftDecl Plutarch.Api.PTxOutRef
instance Plutarch.Internal.PlutusType.DerivePlutusType Plutarch.Api.PTxId
instance Plutarch.Lift.PUnsafeLiftDecl Plutarch.Api.PTxId
instance Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData Plutarch.Api.PTxId
instance Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData (Plutarch.Builtin.PAsData Plutarch.Api.PTxId)
instance Plutarch.Internal.PlutusType.DerivePlutusType Plutarch.Api.PPubKeyHash
instance Plutarch.Lift.PUnsafeLiftDecl Plutarch.Api.PPubKeyHash
instance Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData (Plutarch.Builtin.PAsData Plutarch.Api.PPubKeyHash)
instance Plutarch.Internal.PlutusType.DerivePlutusType Plutarch.Api.PPosixTime
instance Plutarch.Lift.PUnsafeLiftDecl Plutarch.Api.PPosixTime
instance Plutarch.TryFrom.PTryFrom Plutarch.Builtin.PData (Plutarch.Builtin.PAsData Plutarch.Api.PPosixTime)
instance Plutarch.Internal.PlutusType.DerivePlutusType Plutarch.Api.POutputDatum
instance Plutarch.Lift.PUnsafeLiftDecl Plutarch.Api.POutputDatum
instance Plutarch.Internal.PlutusType.DerivePlutusType Plutarch.Api.PDatumHash
instance Plutarch.Lift.PUnsafeLiftDecl Plutarch.Api.PDatumHash
instance Plutarch.Internal.PlutusType.DerivePlutusType Plutarch.Api.PRedeemer
instance Plutarch.Lift.PUnsafeLiftDecl Plutarch.Api.PRedeemer
instance Plutarch.Internal.PlutusType.DerivePlutusType Plutarch.Api.PDatum
instance Plutarch.Lift.PUnsafeLiftDecl Plutarch.Api.PDatum
